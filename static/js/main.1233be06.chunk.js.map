{"version":3,"sources":["Test.jsx","NumberOption.jsx","TestBoard.jsx","index.js"],"names":["Test","checkAnswer","event","_this$props","_this","props","number1","number2","answer","target","value","setState","result","parseInt","_this$props2","this","state","className","undefined","react_default","a","createElement","concat","type","onChange","PureComponent","NumberOption","noOfTestsRef","React","createRef","selectNumber","onSelect","number","changeNoOfTest","delta","currentInput","current","onChangeNoOfTests","increaseNoOfTests","decreaseNoOfTests","selected","noOfTests","onClick","defaultChecked","ref","TestBoard","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getInitialNumbers","_","range","map","n","tests","generateTests","numbers","updatedNumbers","toConsumableArray","setNumberTests","Math","min","max","resetSelection","recordAnswer","test","existingTests","length","used","find","_ref","t","floor","random","_this2","Fragment","id","key","NumberOption_NumberOption","filter","Test_Test","rootElement","document","getElementById","ReactDOM","render","TestBoard_TestBoard"],"mappings":"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","file":"static/js/main.1233be06.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\n\nexport default class Test extends PureComponent {\n  checkAnswer = event => {\n    const { number1, number2 } = this.props;\n    const answer = event.target.value;\n    this.setState({ result: number1 * number2 === parseInt(answer, 10) });\n  };\n\n  render() {\n    const { number1, number2 } = this.props;\n    const { result } = this.state || {};\n    const className = result === undefined ? \"\" : result ? \"correct\" : \"wrong\";\n\n    return (\n      <div className={className}>\n        <span className=\"question\">{`${number1} x ${number2} = ?`}</span>\n        <input type=\"number\" className=\"answer\" onChange={this.checkAnswer} />\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\n\nexport default class NumberOption extends PureComponent {\n  noOfTestsRef = React.createRef();\n\n  selectNumber = () => {\n    this.props.onSelect(this.props.number);\n  };\n  changeNoOfTest = delta => {\n    const currentInput = this.noOfTestsRef.current;\n    if (typeof delta === \"number\") {\n      currentInput.value = parseInt(currentInput.value, 10) + delta;\n    }\n    this.props.onChangeNoOfTests(currentInput.value);\n  };\n  increaseNoOfTests = () => {\n    this.changeNoOfTest(1);\n  };\n\n  decreaseNoOfTests = () => {\n    this.changeNoOfTest(-1);\n  };\n\n  render() {\n    const { number, selected, noOfTests } = this.props;\n\n    return (\n      <div>\n        <input\n          value={number}\n          type=\"checkbox\"\n          onClick={this.selectNumber}\n          defaultChecked={selected}\n        />\n        <span>{number}</span>\n        Number of tests:\n        <input\n          type=\"number\"\n          onChange={this.changeNoOfTest}\n          value={noOfTests}\n          ref={this.noOfTestsRef}\n        />\n        <button onClick={this.increaseNoOfTests}>+</button>\n        <button onClick={this.decreaseNoOfTests}>-</button>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport _ from \"lodash\";\nimport Test from \"./Test\";\nimport NumberOption from \"./NumberOption\";\n\nexport default class TestBoard extends PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      numbers: this.getInitialNumbers()\n    };\n  }\n\n  getInitialNumbers = () => {\n    const initialNoOfTests = 2;\n    return _.range(0, 11).map(n => ({\n      number: n,\n      noOfTests: initialNoOfTests,\n      tests: this.generateTests(n, initialNoOfTests),\n      selected: false\n    }));\n  };\n\n  selectNumber = n => {\n    const { numbers } = this.state;\n    const updatedNumbers = [...numbers];\n    updatedNumbers[n].selected = !numbers[n].selected;\n    this.setState({ numbers: updatedNumbers });\n  };\n\n  setNumberTests = n => noOfTests => {\n    const { numbers } = this.state;\n    const updatedNumbers = [...numbers];\n    updatedNumbers[n].noOfTests = Math.min(10, Math.max(0, noOfTests));\n    updatedNumbers[n].tests = this.generateTests(n, updatedNumbers[n].noOfTests, updatedNumbers[n].tests)\n    this.setState({ numbers: updatedNumbers });\n  };\n\n  resetSelection = event => {\n    this.setState({ numbers: this.getInitialNumbers()});\n  };\n\n  recordAnswer = test => answer => {\n    test.answer = answer;\n  };\n\n  generateTests(number, noOfTests, existingTests) {\n    if (existingTests && existingTests.length > noOfTests){\n      return existingTests;\n    }\n    const used = _.range(0, 10).map(n => existingTests ? undefined !== existingTests.find (({number1, number2}) => number2 === n) : false);\n\n    return _.range(0, noOfTests).map(t => {\n      if (existingTests && t < existingTests.length){\n        return existingTests[t];\n      }\n      const number1 = number;\n      let number2 = Math.floor(Math.random() * 10);\n      while (used[number2]) {\n        number2 = Math.floor(Math.random() * 10);\n      }\n      \n      used[number2] = true;\n\n      return { number1, number2 };\n    });\n  }\n\n  render() {\n    const { numbers } = this.state;\n\n    return (\n      <React.Fragment>\n        <h1>How are your multiplication skill?</h1>\n        <div>\n          <h2>Select number table(s)</h2>\n          <ul id=\"number-selectors\">\n            {numbers.map(n => {\n              return (\n                <li key={n.number} className=\"number-option\">\n                  <NumberOption\n                    number={n.number}\n                    selected={n.selected}\n                    noOfTests={n.noOfTests}\n                    onSelect={this.selectNumber}\n                    onChangeNoOfTests={this.setNumberTests(n.number)}\n                  />\n                </li>\n              );\n            })}\n          </ul>\n          <button onClick={this.resetSelection}>Clear all</button>\n        </div>\n        <div>\n          <h2>Now, do the tests</h2>\n          <ul id=\"numbers-lister\">\n            {numbers\n              .filter(n => n.selected)\n              .map(n => {\n                return (\n                  <li key={n.number}>\n                    <h3>Number: {n.number}</h3>\n                    <ul id=\"tests-lister\">\n                      {_.range(0, n.noOfTests).map(t => {\n                        const test = n.tests[t];\n                        return <li key={test.number2}><Test {...test} /></li>\n                      })}\n                    </ul>\n                  </li>\n                );\n              })}\n          </ul>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\nimport TestBoard from \"./TestBoard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TestBoard />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}